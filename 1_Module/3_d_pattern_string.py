from utils import hamming_distance, split_dna
from itertools import product


def all_strings(k):
    nucs = ['A', 'C', 'G', 'T']
    return [''.join(p) for p in product(nucs, repeat=k)]

def distance_between_pattern_and_strings(pattern, dna):
    k = len(pattern)
    total_distance = 0 

    for text in dna:
        min_distance = float('inf')

        # iterate over all kmers in dna string (text)
        for i in range(len(text) - k + 1):
            kmer = text[i:i+k]
            dist = hamming_distance(pattern, kmer)

            if dist < min_distance:
                min_distance = dist

        total_distance += min_distance

    return total_distance

def median_string(dna, k):
    distance = float('inf')
    patterns = all_strings(k)
    median = None
    for pattern in patterns:
        current_distance = distance_between_pattern_and_strings(pattern, dna)
        if current_distance < distance:
            distance = current_distance
            median = pattern
    return median

dna_list = "CTGACGGAGGAGCAGCTCGGCGTGATTCGAGGACGCCTCGAGTTCAGCCTGGATCGGTGAGGCCAAGACTGCGTGTCTGCAGATCATTCC CTGGATTTGCTTGTTTTCGCCTGTCTTAAGCATAGACTCGCTCCATCAAGAGCTGCACGAAACCTGTACTAACCTCTCCGGCATCGCGCA CGTGCGTTGCTCGACGATGATTGATTATTGGCAGGCGGCATGAATAATCTTACTACGCAAAGTAGCGGTAGGTAAAGTGTACAGCAAGAT CGGTTAAAGTCGCAAGACCAATCCGCCGTTCGATATGAGGGTACTGGTTTAGAACCAAGAATACCCTAACTGATCCTGCAACCATTCAGC CGCATCAAATAGAACGTGCATCCTGACAGTAGCGTAAAGATTTTCCAAAGTTCATAACCCTCACGCCTTACTATTAGCATTATCTTAACT CTGGCCGAAACGATCGACTATTAATGACCGTTCAATGGGAGCGGGACGTGTAAATAATACATACTCCAGTTCACGGAGCTAACCCTCGTG TATTACAAAGTTAAACGCCAATGTTGCGTGTAGCGTCAAGAGCTTATGATTTCTTGGCTGTGTCATGCAGTGTGACCTAACTGTATGTAA GAACGAGTCGACAGACGCGTTCATCGTAATTGATTTTTCCTGAGATGTGGTAACCACCTATCTCGGATGGCATCGTATGAGTCGTGGGGT CCCTAATCCAGGAATGGGCGATCTAAGTACAAATGTTGAGAAGTACAGTGTCAGACGATTAGATAGGAATACAGTGTTTAGTAAGTGAGG AAAATCAAACCGCCCAGGCGTAAAGTTGTTCTATCATGCGTTGATGGATTCGCTTCCCAGCCATTGTTCACACTTACCCCCAACGAAGCT TAAGGGGAGAACGTCTGAGACAGACGAGTCCTAGCCTGTTACGTCTCCTTCGCCGCAGCACACACGACAGTCACGAGTATAGTGGCGTCG TAACATGAGAACCTATCAGGAGGAAGCTATAATTCCACTAATTAACGTCAGTTTGACTTTGGCAAAGTTCCGGATACTAGGGTTCATTTC GAACTTCTTTAATATGATACTCGGTGGACTGGATTGCGCTAATCGCAGAACTGCGGTCGACGCGCGGAGTTCGCTATGACACTCTCTTAG CCCGGTACTAGCGCCCTGGTGATAAGGACATAGGCTACTCGGAACGCCCGCATTACGTGAAATTTATTACCCCTGAGGGCATGGATGATT TAAAGGGGTGGCGGATGAGTCATCTCTTGTATTAGCCAGACTTGCGCTTAAGGGTCGCAGACCGTCATTAAGAATTGTGAAACTTTGGCT GGTACTTGACAATGCTCCAAATTTACTTAAAATAATAAATTCAGGGAGTCTGGAATCCTCAGTAAGCTCCGTGAGTCACCAACTTCGCAA GGATTAGCCTCGGGTCGAGTACGATGTTTTTTCGGGCGTGAATATTAGAAGACCGGACTGCGTCTAAAGCGTCTCGGTTGGCACAGTCAC CCCCAAGGGCAACACGGCTGAAGGACCCATTCGGGTAGGGAGCCTGGCCATCTCCATGCCTCCGAATAACAAGCAATGAGTCATTGCGGA TGGAATGTTAAATTCCCGCCTAATTAATATCGGCTTATAACATATTAAGGCCCTCACAACGAAAGGCGCGGCCTCTGCTTCGGTGAGGCG CCTAGCCTGCAATCTCGGATCGATACGCTTACGGCCGATGGAGAAGACCTGCTTCGGTATTCACCAGGCATGTCACGGCAATTTGCTAAG CCTTGTTAGCTCAGTTGTTCAAAAAGGCGCTCTCTCCTTGCTAACTGGCTCGAAAACGTTAAGCCGCGTCAAGCGGACCGGTTGCCGACT TAACCGAGATGCGCGTGTCGGGAATTGCATTCCAAGTGAATACACGTAGTCTTGTAGCCTTTAGCGATCACAGTCTATATGCAAACTGGA CTCTGAACTACATAGCGAGGCCACAACCGTGGAAGAAGTCCATCCTTTTGTATGAGACGACATGCCTGCGCTCCGTGGAGAAAGAGTCGC GCTGCTGAGGGGCGCAATAAACTCTCCTTTAGCTAACCACTGGATCGCTAAGCACCATCGTAAAGGACTTACTTGAAATTGAGTAGAGCA TGCCTTTGCGTTCAGGTAGTACGGCATTGCGATACTCGGTAAGATCTACAACCGGGCATCGCTATGTTCAATGCAAAAGGCACATCGGGA CCAGCAGAGCACCTTCTCTCGCATGCGTAACAATGCTCCTCTCCTTCTCGAGGCGCACGGTCAATCGCTAACCGAGGCCCAACGAATACA TAGTCCTACAAGGTGAGCATAGTTCCGATGTCCAACTCGTGCCGGGCTGCTATCATCTTGGGATAAGCATTAGACCCATTACTGATGGCT GACCTAGGTGGAGCTGCCCTCTAAAGGTTGAGCAAAATTTACAAAGTTGAAGGACGGGCGTGACCAATCACAACTTGATGTTCGCGCCTT TTGGCAGGACAGTGAGTTAGCGTGCAGGATGCGAGGTGTCCGCTGGGTCGCTCAAACAGCCCCTAATGTATCTCTTTGGCTCTAGGCACG AAGTTCGACGACGTATGCCTGTGGGTTATGCCTCACCTTCGCGCACCTATAATATGCGTGTCTAAAGGACCAGCGCAAAGGACGTTGTCC TGACAAAACCACATTTCAGCCGAGAAGTACCGAGCCAGTTCTGACATTGAACGAGGCGCATTCCGATCAAAATAAAGTTTGACACAAAAA AAATACGAACGGCCGTACTACCGGAACTCGGACGTGGTCCCAAGTAGACCAGTGTTACGCAGGTGCCATTGGTTACAAACCTGTTTCCAT CGGTCCTACGCACGTCGGGAACAAACTTTCACCCGTTCACTAATACGTTGGACATTACCTTTACGTCACAAGGTGGAAAGCAGTAACTAA GGGGTCGTCATGGGCCAACGCACTAGGTGAGTGAACCTATTTTAGCACACGGAACAAGACACGAGTTTAGTAGGAAAAATGACTTAACGA TAACAGACGGCATTGGAAAGTATCATTCGTCGGACCCGCATCCTGCGATGATATTCTGTTCTCAGTCGTGAGGCAAGTTCTTAACCGATC TCATGTTAGGGGGCCGAGCTCCATATAAGGAACACCAGTCCACCTATGAAAGCGACTTGAAAATAGAAACGCGTCAGGCGTCGTCATGAC CCCCAAGTCTCGGCGTATGCAGAGCCTGAGACACAGCAGAGGGTCTTCCTCAGACGTGATTCGGATACGGCGGTACAACGAAAGGTTGGT CTGCTTGAGACGGACTCCCGACAATCCGACCGTTCTGCGGGGTGAATGGAACCTGCAAATAAGTTCCAGTTGGATGTGGGACTGGCCGAC AACACGTCGTGACAAGTTTTTTCCAAGGTCTAAAATGCAACCACAGACGACCATAGGCAAGCCCTGCGGCCTAGAGACACGATTGGCTGA"
dna = split_dna(dna_list)
pattern = "AGTCTA"

print(distance_between_pattern_and_strings(pattern, dna))
print(median_string(dna, len(pattern)))