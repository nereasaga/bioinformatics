from utils import profile_most_probable_kmer, parse_profile, profile_probability
from collections import Counter

def build_p_matrix2(motifs):
    k = len(motifs[0])
    t = len(motifs)
    profile = {'A': [], 'C': [], 'G': [], 'T': []}

    for i in range(k):
        column = [motif[i] for motif in motifs]
        counts = Counter(column)
        for nucleotide in "ACGT":
            # relative freq wo pseoudocounts
            freq = counts[nucleotide] / t
            profile[nucleotide].append(freq)

    return profile

def split_dna(dna_string):
    fragments = [fragment.strip() for fragment in dna_string.split(' ') if fragment.strip() != '']
    return fragments


def score(motifs):
    k = len(motifs[0])
    score = 0

    for i in range(k):
        column = [motif[i] for motif in motifs]
        counts = Counter(column)
        most_common_count = counts.most_common(1)[0][1]
        score += len(motifs) - most_common_count

    return score


def greedy_motif_search(dna, k, t):
    BestMotifs = [dna[:k] for dna in dna]

    # initializes BestMotifs with the first k-mer of each DNA sequence
    first_dna = dna[0]
    for i in range(len(first_dna) - k + 1):
        motif1 = first_dna[i:i+k]
        motifs = [motif1]  # Motif1

        # builds the profile matrix from the first motif
        for j in range(1, t):
            profile = build_p_matrix2(motifs)
            next_motif = profile_most_probable_kmer(dna[j], k, profile)
            motifs.append(next_motif)

        # compares the score of the current motifs with the best motifs
        if score(motifs) < score(BestMotifs):
            BestMotifs = motifs

    return BestMotifs



k = 12

dna_string = "AAGGAGGTGCCATACGAACCTTGAAGAGTTCAGCAAACGACAGATAAAAATGAGGGGGAGTCATGACAGTCGCGCATTACGGTCACCAACAGCCCGGTAGCTCATCTGAGCTCGAACTTTCAGATAGGTGCTTGCAACAACCCTGCAGGTTCCCCC TTTCTTGGTATGGACGCAACCTGAGCAGTATCTAGGTCCGCGTGAGAATACGAGCATTGAAGTTCATAGGATGCAGAGTTGACATCCCGTTACGATCCTTCCCCCGAGCCAGTAGTTGACATATGTCTTCCCATCATGAGCGAGTTTATTATGCCG GGGTCGATGGGGGTCGCTGGGCGGAACGCATGGACTTGTTGTATAAGAAACAACATGGTCACCGCGTCTTTCATCAGCACCATGCCCCTATCCGCGATTTAATATCTGCAAGAAGAACCCTACCACCGTTGAATCGTAACGTTCGGTTACGGATTT CCTAATCTTAGTTGCAAAGTGACCCAGCTTTTCCAGAGGACTCGTCGTTGCATTTGGTCACTTCTCTCCAGCTCGGCACATATCAAGAACTAGTATCATTGGGCTCGTCGTAAACTACCATGGTATAGTTCGTACTAGCGTTGAAACATGTTTGTT ATTGCCTCCCCTCTTGACAATGTTCAACCAGATCCTTACAAACCTTAAGGAGGTGTGACAAGCTTGAGCTGGCCCGAGTCTCTCGCTCTACGATCCCCCATAAGACCTTGTACATTACATCTCTTTTTAGTAGGTTAATCAGCACTGAAGAGGCTG TTTTCGAACAACAAGGTGAGGGTATCTCTACTTGCTATGACCACGGTCAATTTTTAGACTATGATAAGGCTTTCCCAGCGGGACCGTCTGGCCTCATACTATCGTTTACCATCATTATCCCAACGATCAGCAAGGATGGTGTTGGATATTCAATGC GAAGGTCGGTCAGCACCGTTAAGGCTGGGCATTAATACGGCTCGTGTAACCTTCTATCGAGCTGATAGCCAGAGTAGACCGGACTGTAGCTGGTGGTGTTTTGACGTTTACCAACGTTTAGGCTCAAGATGCGGTTTATCCTGACGAGTAGGTCTA GCAACCGCCGAGTACCACCTTTCAAGAGATAGCGGGTGTTGACGACAGGCGGAGTGCCTCCACACGCTACATAGGGTCCGTAAAAAGAGAGGTTTCGTGTTACACATTCTTTAGTGTAAGATGGCGCGAACCAGAAGCCCTTTCGTCGGTGTAGAA TAGGACCTGGTATACTAGCGTTAAAAAAATAACGATCGAATATGGGCATGAGATTAGGGCGACCTGGGAGAGTAATGCACAAATTGAAACACCCTCAGACGAGTTGAGGGGTTAGCCTTTTCGTATGCTTCTACGTACCGGTAGCATCAGGCGTTA TGGCAAGAACCTCCACGCTACCCGTACTCAGCAAGACTCGTCCTGATAGCAGCGTGATCTTACGAACTTTCAGTAATGGTGAAGATACTCGCAACAGGTTGTGCCGGGTATCCACTAACAATTGCCTGCGCCTCTTGCTTCTCTAATGAGCCGCAA TACGACCATTCACTACACACCCTACGTCGAGGAGGGAGGTTCCCTTAGAGGATTCTCCATTAGGGACGAAATCATAAAACAGGAGGCCAGCATGCGTGTGATGTCTGTCAGAAGGCCTGAGGCTCTTGCGAAGCGTAAACAGGGTAAGCCGAGAAC TCACTTCCATAATACTCGTGGCGCCGGGATATTTCCCCCTCCGTATGATCTGTTTTTGTATACTACCGTTCACGATATGAAAGGCAGAAATTCGCCCAAACGCCGTATATTTGGTCGTCACTCATGTCAACAAAAGATGATATCGCGGAACGTAGT CGGTACAAAGCCTGCGGTAAATTGTACTATCCTTAAATAGGGATAGAGAGTAATCAAGGGCAGGCTATAGAGGGCCCACGGTTCATTATGCCAAGCTAAGCGGAATGTCTGTTTTGATGCGACCCGGTGAAGAGCCAGATACTCTATCCTGAAGGA CTGAGGCCCGGTTTAGGAGCGTCAGTAATATTGAAATACGAACGTTCAGTTCTTTGGGGCCAGTTTCCTAGTAAAGCGTACATGTAGCTGCTTCCGGTTGTATAATCGCCAAGTCGAATTCGCAAGCAATGCGCGAGTGACAAACCAGAAATTAAA CACGAGGCTTGGTTATTGGTCTAGAGACAACACTGTTTTCATACAAGCTCCCGATTTAAGAACGCGGCAGGAAGTATGTCCATTCACTGCTACTCGACGCATGTAGTCTTCGAACTAGTCTGTTAGGACACGGTTCATTAAGTCTACTATCCTTCA CCTGGGTCCCACTAATGTCCGTAAAAAGGGATAAGCCTTTCCCTCGGGTACAAACATTTACACCGTACCCGTTGTGCCAATCGTACGACGAGCCAGAGTTATTCTAGTTCGCTACGGAAGCACTCGGTCTAACGTGTAGGCGCAGTATCTTGTTGG GCGGAGAGTTGAAATCCGTAAGACACGAAGGAATGGACTTAGCAATCGTACCACCGTTGACTTCACGGTCGCCCCATGAGGCGGCCTACAACATCTTGCCCAACGCTATGTTAGGGGACTATCTCCACTTCAAAGTAGTTGAAACCCCGCAGGTCT TTAAGGGTGGAGTGAATAAGTTCCTACGAGCCTTTAGCCAAGTCTTCCTTGCGCCCGCCCTCACTAACTCGCTACCGTTGCAGCACTGTTTCTTGGTGCTCTCAGCACACTGGCAAAACAGCCACCTGGGTAGCCACCGCCTGGCTCCTCAACTCC ATTAATCGGCACTCTCCTGCCTCCAGACTCTTATAGGTGCGTATTCTGTACTACCATTAACTCCAGAAGGCACCAATCTTGGGTCGGCATCGCGGTTCGTATTCCTAGAGGGACGCTCCATGGCATGGACACATCGAAGGAAAAGTGTGCGTAACA ATTTCGTTCCCGTTAATACCTGATTGCTGACGTCCCCTACTTGATCGCATTATAAGCCTTACCGCTGCGCAGAATTGTGGCTAGTGAGTATGTTCGAAAGATGCTGGGAGTATGACTTACGTGTACATCCTCTACCAGCGTTCAGGCGTTCTAATT AACATTCATTCGCCTCTTCTCGCCGCATCAACCGAAACTGTCAAGACGAGGTGTGGTTCAATATACGCCTTTACTCCACGCGTGACCTAATTAGATTTACCTTGAGTGTACCAGCATTCACTAAGCAAAAGCCCGATTCGCTTCCCGAACCATGCA CTAGCTTCGTATCATGTAAGAGGCGAGCACCAAGCGGGCGTCCCGGTTACAAGCCGAATCATGATGTTTCTATACAATCTTTTATCAACTGTTACTCTTACGCGAGGGCATCTTCCTTAACAACGATATTAATAGACTCTTGCCATGCGCTCGTAA CGCCATACGTTTTACCAGCTTTGAGCTAGGCTCCATGACAGGCGCCCACGGAAGAGGGCGAGGTGCTCCCAAACTTACAATAAGCTAGCCCGCGAGATTCTCATCGATGAGAGCTTTACTGGCTCACGGACAAAAAAGCCATGTCTAGGCGCTGGT AGACATTCCACTATCGTTTTAGGATACTACCCTTTAAACTAAGCAATGGATGCGTCGAGAACGTTACGCTTGGGCAGGCGGGTAGGAGCGCAAGCAAACGCCGGTGTACAACGCGGTAGTATGTGTAGCGTTCCAACAGATAAAGCGCGTCGGATA GGCCAAAGACGGTGAAGATCGCTGTGTCGGCGGATCGCCCCTCAAGATGCGGACCACCAAGCTATCCACAATGGGAAGTTCAGTTACCAACTTTAACCTAATGAGCTCGGCCCGGAAACATTCAAGGATACAGTTTAAGGCGTTCCGTCTTGCCGC"
dna= split_dna(dna_string)
t = len(dna)

print(" ".join(greedy_motif_search(dna, k, t)))