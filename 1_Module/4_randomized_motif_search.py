from utils import profile_probability, profile_most_probable_kmer, build_p_matrix_wp, score, split_dna
import random

def randomized_motif_search(dna, k, t):
    # select random kmer
    motifs = []
    for seq in dna:
        start = random.randint(0, len(seq) - k) 
        motifs.append(seq[start:start + k])

    best_motifs = motifs[:] #copy list

    # iterate while the motifs improve
    while True:
        profile = build_p_matrix_wp(motifs)
        motifs = [profile_most_probable_kmer(seq, k, profile) for seq in dna]

        if score(motifs) < score(best_motifs):
            best_motifs = motifs[:]
        else:
            return best_motifs

def repeat_rms(dna, k, t, n_runs=1000):
    best_motifs_overall = None
    best_score = float('inf')

    for _ in range(n_runs):
        motifs = randomized_motif_search(dna, k, t)
        current_score = score(motifs)

        if current_score < best_score:
            best_score = current_score
            best_motifs_overall = motifs

    return best_motifs_overall


k = 15
t = 20
dna_string = "CCTTCCATAAAATTGCGAACTAACGAAGTCGGGGCAGGTGACTGATCGTATGGGCCTGTACATTTTAGGTTCACTACGAGACTTTTGCAAGGATTTATGCACTAAGGATTCGAGCTGACAGTAGTATTAGCGGCAAGCCTCGGGCGCTGATTTAGGCAGTCCCTCGCAGGTGGCATGAACAACTAATACGCCTTCCATAAAATTG CGAACTAACGAAGTCGGGGCAGGTGACTGATCGTATGGGCCTGTACATTTTAGGTTCACTACGAGACTTTTGCAAGGATTTATGCACTAAGGATTCGAGCTGACAGTAGTATTAGCGGCCAGACCCCTATCAGTAAGCCTCGGGCGCTGATTTAGGCAGTCCCTCGCAGGTGGCATGAACAACTAATACGCCTTCCATAAAATTG ATTGGCCGCCACTTCTTCGGTCAGATGTAATCACGAGCTGAGGAGCAGTAGGGGTAACGAATCCGGATCAACCGCACAATTTTCATATCCGCAGTAGATTATCAGTCACCTTATTATTCGGTCGGACCATCAGTGAAGCCGACTCTTCTTCCCAGGAATATTAGATGAAGACGCCTACCTGAGTATAAGAGAGGCCTCCATCAAC CGTTCTATGCGGCGACTTTTCGTGCCGGCTTCCTAGTCCTACACCATGTAGTCTTAAATTCTCAGTATCTCCTCAGTTTCACATCCGGATACTCGTTATTCATTTACATTAAGGCCCACGAGCATGCTACGACGTAGCAACCAACTGACTCGCGGCTATCGCTTCCCAACCTATCCAGTAAACCTTACTCATGAAATCGAGTGTA TTCTGGGAATCTCCCGGGGGCAGTATGAGACTGGCGAGCCCCCTGGTGCCGTATAATTTGGGCATCCTGGCCCCCGGCAGCTGAGAACACCTATCAATAATTCCTACACGTGAGCCCGCTCGGTAAGAACCCGTTTATTGTAGATCCCAGTATCCCGCCAGTTAAAGTGGTCAACATTCTAAGATTGACCTGGGCAAGACAGCAC ACGTGAACAAGCGACACGAGCACAAGCACCTCAAACAGCCAACATGTCCAGAAGACCCACGACTAACGATCTTGCCGACATGGAAACTTGGCCCCTGTCTGATAGACTGTTGGCTGATGAACAGGGATTAAGTTATCCCAGGTAGTATCATGTGTGTTTCAGGCTCACATTCCTGCCCGTAGTATCCTATCACCGGATGGCTTGC AGGGGGAAACACTCTTGCCGCAGTCAGTATACAGCTTGCTTCTGTTAACCAGTGCGCTATCAGTACCCGGCGGTGAATAACATTCAAAACTCGAGACGTCTTACTCCTATACGTCTACCCTACACAGCTATAGGACAACCTGAGGGAAGTTCGCAAAGGTACAGTGATTTGTACTTCGATTCTTGTACGTAGACAAGACAGATTA ACTGGCTTGGTTGGTCCGATTCCACCGGTTGCACTCCGGTCTCTTATTATTCGCTCTGCCATGCTCCTATCAGTTTACACCAAGAGACGTCCTTAAGATTTAAGCTTATGTAGAAATCATATCCAATACCATTGTCAACTGACGAACAGGGATCGCGGTAGCGACCTCCCAGACAAACGCGGGTGCCTGCTTTTATAAGATCCCA GGGTTGCACTAACCCGTATGTCTTCGCCGAATACAGTATCCTTGAAGTAATATCGAACGAAACTACGTAGTTCGTTCCCCTCTAGAAGTTGTAGTAGTAGCTACTGCCGATTGCATTGGACCCGCCCACTCTTACACCCATAAGCATTGCTAACGACGTTGAAACCCTGGTTAATCCGTTGCCTGAACCTCCTCTAGCCGGACAG TTTAATTTTAAATATGGCAGTATCCTATCGACACTCTCACCATAAACGATAGTGGAATCCAGTCGCTAACCCGGCTCCCCTACAGAACCGACAACGCGATCTGCCGAGGCATGACTCACCTTAGTCTGTTCACAACGAATTTCCGACTATGCTACAATTAAAAATAAGTGAGTGTAAGGCGCCGCCTCGTGATTTACGGGCGAGG ATAACAATTGCGTAGGTGAATGGTGACTTCCTCCCTTTTGCTATCATATTCTGCACTATGTCTGCGACTACCATTGCGCTCGATCAGGAACATGGGACGAAATCCAATCATCATTTGTTCCGGCAGACTTACAGTATGTCATCAGTATTAGTATGTCCGCCCTGGGCGGAATCTGTTGTGGTTATGCACGAGGTAAGATAGTTCG CAGACCCTGATCTCTAACCTTGTCAGTCAGCTATCAGTCGATATGATCTTGACCATTTACTTGCACAGAGGTGTGAGAAGGGGGCTTGCACGCCACCCCCAGGCACGCTAACGAATGCTAACTAGCCCTGAGTCTGGGAGGCTGTCCCGTTATGGGCTTAATCTACATTGCAGTTGTTGGATCGAGTTCGTATAGTTTCCTAGGT GAGACCATAATCGGTTCTGTCAAGCGGCCCTTATTAGCTGGCTTGATGCGAGGATCTATGAAAGTCGAGCCAGAATCTATAAGTTTCATAGCCTTTTGACGTACCATGCCTAGAACCGCGGTAAGGCTAAATCCTATCAGTTACTGAGGTTAAATAGGCGAAATATAAGGCAGAAAAACTCCAGTTATGGCGGTTAGAGATAGGT TCTGCGGATTATTCGCAAAAAACTTACGATGGAGTAACTGTGGACGATCGCTCAGCTGAACACTCTTGAACCAGTATGAAATCAGTATCCTTATGATCGGCTGACCTGTGTTGGTGAAGCGTGTCTTACAAACAAGAAATGTAGATAAGGCCATGGGATGAGAGTTTGTGGTCCTGCGTTTGTCACTAGCAGCTGCCGTCATTCA TTGCCTACAGGTCGATATGTTCAATACCCGAACGACCTCACATTGCAGCGCCGACACCCATAGATATTGTCATTGATTTTTCGTGGCGAACGGGGTATCCTATCAGATTTCCTCGTTAATATTGACCGCTTTCAGACCACTTCTTTTTTATAGAGTTTCTCTACAAGGTCCTCCGACTCGTAAAGGAACACTTGGATCGGATTGA TCACATAGTTAACAGTATGGCTTCGACTAGACTGGGCGCAGACGCGATACCGGGCTAAGGATTATAGTCAGTCACTTAGCGTTACCTCAGTAGGGACGGGACCTGGAAGGTCCTATCGTTCAAAACGAGCACCGTATCAAACCGTCGCCTTAACCGATCGATTTTCATATAGACTTCAGTATCCTAATCGTAAAGGGGTGTAGCA TAAGCTCAATTTACTAGCGTAGTTGTGGGTTGCCAAGGCGGCTCAATGTGCAACTGTGACTTCGCTCAAAGCAGTGCGTCTACACGAGTGTCAGCGTAAAACAGTAAGTTATCAGTCGCCGCCCAACGGGTATCAAGCGGAGCAATGCCCCTAGCACACAAAGCGGAGCTAATACTTTGCGCTGATCCTACCGTAGAGTTTTATT CCGTTAGAACAGAGAGAGTGTTGCTGTCGCCTCTACCGTCGTACAACAGTATCCTATTGTTAAGATGGGTGCGTAGCCCGTCTTACGTCATGCGCTCGGCACCTCGGCTCCATCGTGAACCAGATTAAACCTCAGTCTGGTTGGTATTTCTGCTCAAAGACATGAGTAATTGGCCGTAGAATACTGTAAGCCATCATGCAAGGCT TGGCTAAGACTCGGATCCACGGTCTGTCTGAGGGTTACAAGGTTTACTGGTACTCGTGGGAGCGCATGTCACTTTTAACAGAGTGCATATAGTGAAATACGCACGATGTAGGGCAAGGCTCAATCGCGAACCAAATTGCTTGGTAACGTTGAATCGGCCAGTACTCTTCAGGCCCCTATCAGTAATGAACAGCATTCTAGTCGAT ACGGCTGTCATTATGGTACACCGTCACCTTGCTGCGGCGTTTGCGAAGAATGTCTTCATTCTATCCTATCAGTCCAGTTGCGCAAGCATTATCGCTATAAGAGAAAGGCAATAGAAGGGTGAAACTCCTTTGAATGCTCCGCTAATAACAATGCACACTCGATGTTGCAACGGGAACCTTGCCTTACAACCGCAGTCGCTAATTA"
dna = split_dna(dna_string)

print(" ".join(repeat_rms(dna, k, t)))

