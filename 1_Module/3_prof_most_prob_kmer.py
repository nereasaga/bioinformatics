from utils import build_p_matrix

text = "ATACCTGAAGATCACTACAGCCTGAATCGATGGGGTGGAGCTGGAAAGATCTACATCTAACCAACGTGGTCGTCCGAAGTGCTAACGGACTTGTTTACCAGAGCCTTAGAAGGAAGTCTGAGGCACGCTCTGACGCCTGCTACCCAACTTCCGTAGCGTGAAGGCCCGATATAACGATTTAACCCAATCCCCATCCTACACTTTTGGAGACAAACGCCCACCATTGCTTAGTACACTAGTGCGTACACGGCTGCTAAGGTACCGCCTATCCAAGGGACCAGACGCCAAGCATTCGCACCTGGTGGTTCACACCCGGATGCTAATACAATCCGTTATTACGACAAGACCTGACGGAGACGCGTAGCCCTGGTTGAGCCATAGTTTCCTTGTTGAGCCGTATCCCGACGAATCGGGTGTGGCGACATGGGTAGTATTACGCAGAATGTGTGGATCCGCACAGATTCCAATTTTGGGGGCACCTCTAACAGCTTTTCTCGCATGGCCTCCATTTGGTTTTGATAAGTCCATTGGTGCCAACGTATGGACACTCCGCCCACAACCGCAGTGGACCAATTGCGCACCAGTGTTTCCCTTAGACTCCGGAAGTAGACTCATCCCCGCTGTAAGTCTTAAGCGTCAATGCTAACCAAAAGTGCAGTAACACCGTTCAGAACAACCGAGTCTTAGGCTCAGATAACACCATGCGGCGACCTGAAGATTTTCCAGAGAGATAGAATCGTTTTTGACAATGTCTTATCCAACACTTCCTCTAGCCACGGGCGCTAAGCCAGCTCTATAACTCTGTGCATGCACGACGGAATAAACAAGACGATCCTATTGTATCTCCTAGGAGATGTCATAGTCTAGCTCGTTGGTTTCAAGACAGAGCTCCGAGGGTGGAACAGCGACCCGCCTCAACCGTCGCCGCACCGATATATGAGAACGGCACGACTTACCGACAATGATGACGTCACGCAATCAACACGAATCGCGCATGTAT"
k = 14
# profile = [
#     [0.2, 0.2, 0.3, 0.2, 0.3],
#     [0.4, 0.3, 0.1, 0.5, 0.1],
#     [0.3, 0.3, 0.5, 0.2, 0.4],
#     [0.1, 0.2, 0.1, 0.1, 0.2]
# ]

profile_str = """0.211 0.254 0.183 0.239 0.268 0.239 0.254 0.239 0.197 0.197 0.239 0.31 0.324 0.296
0.282 0.254 0.31 0.296 0.239 0.225 0.254 0.282 0.296 0.197 0.183 0.268 0.254 0.211
0.183 0.197 0.197 0.31 0.211 0.31 0.225 0.197 0.296 0.239 0.282 0.239 0.183 0.268
0.324 0.296 0.31 0.155 0.282 0.225 0.268 0.282 0.211 0.366 0.296 0.183 0.239 0.225"""

def parse_profile(profile_str):
    lines = profile_str.strip().split('\n')  
    profile = []
    for line in lines:
        row = [float(num) for num in line.strip().split()]  
        profile.append(row)
    return profile

profile = parse_profile(profile_str)

def profile_probability(kmer, profile):
    nucleotide_index = {'A': 0, 'C': 1, 'G': 2, 'T': 3}
    prob = 1.0
    for i, nucleotide in enumerate(kmer):
        row = nucleotide_index[nucleotide]
        prob *= profile[row][i]
    return prob

def profile_most_probable_kmer(text, k, profile):
    max_prob = -1
    most_probable = text[:k]  
    for i in range(len(text) - k + 1):
        kmer = text[i:i+k]
        prob = profile_probability(kmer, profile)
        if prob > max_prob:
            max_prob = prob
            most_probable = kmer
    return most_probable

print(profile_most_probable_kmer(text, k, profile))