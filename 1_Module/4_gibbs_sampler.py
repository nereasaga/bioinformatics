from utils import build_p_matrix_wp, profile_probability, score, split_dna
# probs dice
import random

def random_c(probs):
    total = sum(probs)
    r = random.uniform(0, total)

    current = 0
    for i, p in enumerate(probs):
        current += p
        if r <= current:
            return i

def gibbs_sampler(dna, k, t, n, n_starts=20):
    best_motifs_overall = None
    best_score = float('inf')

    for _ in range(n_starts):
        motifs = []
        for seq in dna:
            start = random.randint(0, len(seq) - k)
            motifs.append(seq[start:start+k])
        
        best_motifs = motifs[:]
        
        for _ in range(n):
            # select random sequence i
            i = random.randint(0, t-1)
            
            # build profile matrix excluding sequence i
            motifs_excl_i = motifs[:i] + motifs[i+1:]
            profile = build_p_matrix_wp(motifs_excl_i)
            
            # calc probabilities for k-mers in sequence i
            seq_i = dna[i]
            n_kmers = len(seq_i) - k + 1
            probs = []
            for j in range(n_kmers):
                kmer = seq_i[j:j+k]
                prob = profile_probability(kmer, profile)
                probs.append(prob)
            
            # select k-mer based on probs
            selected_index = random_c(probs)
            motifs[i] = seq_i[selected_index:selected_index+k]
            
            # update best motifs if current score is better
            current_score = score(motifs)
            if current_score < score(best_motifs):
                best_motifs = motifs[:]
        
        # update global best motifs if current best is better
        if score(best_motifs) < best_score:
            best_score = score(best_motifs)
            best_motifs_overall = best_motifs[:]
    
    return best_motifs_overall


dna_string = "AGTGATGAGATGAGTGTCCGGTATAAACACCGACGAGGCGAGTTAGTAAGGATCGTCTAACACCTCTTTCTAAGGACAACGTCGGATCCCGCGTACGCGCGGGCTCAACCCCGCTATTCTCATTAAGACGGCCTAAAGCCCACGACGCATCGGTGTTTCATTGAGGTCGGGAACTGACGGAAAGTCTTACCCTACATGATTACTTGGCTCACATACCCTACTACGGCACGGGCAAGGGTTGCCCCGATGAAGCTACACAAGCCTGGTAATACGACTATTGCGTATTATCGAGGAGCTATCGAGTGATGAGATGAGT GTCCCCCCGCAGTTGAGGTGGTATAAACACCGACGAGGCGAGTTAGTAAGGATCGTCTAACACCTCTTTCTAAGGACAACGTCGGATCCCGCGTACGCGCGGGCTCAACCCCGCTATTCTCATTAAGACGGCCTAAAGCCCACGACGCATCGGTGTTTCATTGAGGTCGGGAACTGACGGAAAGTCTTACCCTACATGATTACTTGGCTCACATACCCTACTACGGCACGGGCAAGGGTTGCCCCGATGAAGCTACACAAGCCTGGTAATACGACTATTGCGTATTATCGAGGAGCTATCGAGTGATGAGATGAGT TCCCTATATCTATTTTCCTGTTATTCCCGGTTTAGGTGAAGGCAATCTGTAAGAACGACGGTGAACCTGATCGATCTCGATGCTGTAAAGCTAAACGCTAGGGAGGATCATCCTCGAATCAGGGGGTCTAACTCCACGATTTCCCCACAACAGTGACGACGGGTTCAAGATTGGAGATCGGTTTGCCGAAAAATGACAAAGCTATCCGCGGATGCAGTTCAGGTCCCCAACGTATCCATCTCCTTGTACCCCACCAATTTTGAGGACAGGCTCACCCTTTCAGTGAGGTACTGCTCCAATGCATATTGTTTTGGCA CTTGTCCAACTTGTGCTATGGGTCCGGAGTATCCAAGCCATGTTTGGTGGTACCTTTGACTTCGTCCATATTCGACAGAGTCTTAAGTCGCAAAGCGTGAAATAGCATTTCGAAACTCAGGTATTACGTCCCTTTGCATGAGGTCTTCGGTAGCTCCCGAGTTAAACTGTCATCGTCGTAACCCGCACGATTCAGGAATCTAGGTCACTAGACCACTATACTGCTAGACAGCACAATCAGATCTGTCTCCCCTTTTACAATGATTGGTTACCCAGAGAGGACACTGCTAAGACGCCCGGTCCTCCAACGTATAATC CTCCAATCCCCAGGACCTGCACTGGGTGGATCTGAATCGAAGAATACGGTGTAAGGTGATGACGAGGTAACGCGCTGCCGCTATCATGTGGTACCTGGCGCACGACGTGTGTTTCTCATTTGGTATTATGTCTGAGCTTACTGCAGGGCGCCGGGACCCCGGAACCTCCCAGACAACCCCAGCAGAGTCTAAAGGACTATTGTATAAGCAAATCATCTAGTCGCGTGCACGCACTGTGGCTGAGGCATCCCCTTTAGTACCGGTTAGAGCGTTGCCGAATAAACGTCTCGTGGACGGGGATCGTGAGAGACATTGT TACCGATTGAGAGCCGGCACTACTTCGTTTACAATAGACACCAGTTGTACACGTACGTCCGTTGGTTCCCTCAGCTGAATTTGCTACGTATCGGGAGTCTGCGGAGTTTTCATTCAGTTAAAAAATTCTTACGGCTACAAGCCCCAACCGGAACTCGTACGCAGGTACCCCGGTCCGCCAGTAAATAACACGATATTGAGCACTCTCATCCCCTTTCCGACGTGCATGTCGATAGTATGGCCTCCGAGCCCTTGTTTTGAGGTCTAAAGCTCTTGCTCTCTCCCGGTTGCGGACTCCCCAGCAGTTCATACCCGTG ATTGATGACCGTTGGAGCTCATAATCACCTCCAGCGCGCAGTGGTGCCCTGCTGATGAGCGGATGCACTATTGCGGCTAGAGGGGTGATGTTAGCCTACGAGAGGTAGTTGAAACTGGCCTTGTAGCCCCGACAGGATTACGATTCAATGGTGTCCCCCTTCCCTTGAGGTGGCCCTACGAATTAGAGGGAGCAGGACTGTGTGAAAAAGAGAACTACATGCAGCGGTGAGAACAGTGTTATCGAGCCGAGCTATGAGGCAGCGGCGAGTCATAATGTTATAACGATTACGCATAGTCCCCGGTAGTGAATGGGGA ACTTCAGTAAGCTGAGCCCAATTGGACAAGATTACCCTGTTAAGAGCTGTAGTACATGGATGAAAATGGCCTTTCTTTAGTTGAGGCAATGCCTTCCACAAATTGACAAGCTTTAAGCATCCGGCTTCATAATGCAAAAGGCGCAAGGGGTATACTTTGAGAAAACGTCGGAATGAGGGAAAACATTCGCAACTTCTCTGTGCGAGAGCCCGCTGGAGGCGAATGGTGGACGTTGAGGAGTCGGATACGAGTATGGGGGACAAAAGAAGTCCGATATGTCGGGTGGGTACCATGAAAACAAGCAGGTTCAAACGAC CGAGTCCGCCATGCCAATACCTGCGTGGAAAACGGCCGGGTGGCGTCGCCTTAATGAAGATACAATAGCGGTAGACAAGGGATGACTACATATGTAGAACCCGGCCAGTCTAAGATTCCTACAGGATAGATTTTGTCGCTCTGGAAAGAAGCCTCAAAGAAAAGATAAGATAGGTAGTCAGCTGAACGATAAGCGTTCCCTAAACCGGAAACAGACGGACGGGTGTCGCTCAAGACGCATGCTGTGTATTTCTCCTTTAGTTGAGCGTGGGAAAGGCTGAAGGGCCACAGACCTTCAAGAGTGAAAGTAGCGTAGC CGGCATCCATGTACCACGTCAGAAGCTTATGTTGGAAGCCCCAGGTTGCGGTAGGCGGCTGACCAAGTCATACGACTCGTCAGATACCCCTTTAGAGCAGGTTCCATTTGTCACCGACACCTCTTCCTGTGATTGCCTGGAATGCCCACTATAGGGGCTACGGTGAACAAGAGATTTACCAAATAGGAGCTACATCGTTAATCAGTTACCCATACGTAGCGGTATTCAGTCCTTTAATTTTACCCCACGCCGAGGAGGGGGATCCGGATTTAAGAGAGGATTTACCTAGGAGTCTGGAAATGTGTGCTGCAGGCCG AATTACAACCTGGCAGGACCGGAGCTCAACTCAAAGTCGGCATGCCACCTATGAGAGATTCTAGCACAGTTGTCATAAACGGTCCCAGGACCATCTCTTCTGAAAGGGATGTTACCTGCGACGCGTGCCCCGGGGGTTACTTCCGGAAAATTTTGTTCCCGGGGGACCTGGGTATCTATCTCGGATAACGAATGAACGCATCGTCATAGCGCACTCCTTCAGGTGATCATTCCAGCACTTACGTCGACTGGAACCGGCGGTACCCGGGACGATAGGCGCGCGAGTTGTGGGCCCCAAAGTTGAGGTAGGCATACGC GGTTGCATTGAAGAGATATCCGAGGCGCGGGGAGCTCCTACCGTAGCACTCTCGTTCCCCTACGGTTGAGGTACTGCTCTGCTATTACCGAATCCCGCATTGTTTTGAGCAGCATTCGAACCCAATAGATCAGCTTGATGGCTCTCCTACCCAGTCTTACTCACGATGTAGGACTCAGCCCAATAGGTCTATACGGTACAATACTAGTCTATGAAGCCTGGTAATGGGCTTAGTTTTCGATCCAACCGTCCATCAGGAAACCCAAAACGCTTGGGGTGTTTTGGTCCCACCCCTGAACCGCAATACACAAACCCGG CTTGAAATACCGGTGTTCCCTCGGGCGCGGAGGAGCAACCAGCGAATCTCAAGTCAGTCTACCTGTCAAGAGATTTCGATTGCCCCCGCCAACTCAAGATCGTTACCCGAGGATCTAACCGCTTTAGAGAAGCTTCAAACTGATCGTCTTAGTTGAGGTAATTTCTCGATATGACGCATTAAGTTTGGAGAGACTGGGGTGGTGGTGCTCATTTTCTACACTGTTCTGCAGCATTATAAAGGGCCACTTGCAGCAAGCCCGCCTATGGCGGGACACAGTGGAAGGATAAAGAATAAGGAACGACAGAGTCAATGTC GCGCCGTCCTGGGTTCATTGCGGATAACCCAACTAGTTGAGGTCACGGGCTATTGCGCTCTCGACACCCACTAGGCATGGTGAAGAGCTTCTCGATATTCCCCGTTAGGGTAAGCCTAAATCAACTCCCAGTACGGTTATACCTCCTGAACCCTCTCATCCGTCTCCTAGTGCAGTGACGAATAAATGATGTGCAGTACCGCACGCGAGGGCGATGGAGCCGGAATAAAAGGGTAGTGATCCGATGTTTTTAGTGTTAACGTTTAAGCGGGCGCAGAAACTTCCTGCGAAGGTCTTGCTGTTTATTGGCTAATGTA AAAATAACTTTGCAAATCCCTTTATACGAGGTATAGCCTGGGTGCTTACGTCAATTTCTTTCACAGTTTTGGACGCGGACTTAAACACCCATCGCATTTGGACCATCTTTCGCAGCGGCTTCGGAAACAGCATAAGGTATGACGCCCCAGAAGTCCCCGCAATAATCTTCCTAGACGCATAGCTCGGAAAGATACTTGTCTTGGATTCGCGCCCAGCCTCGCCAAGTTAGGGGCGGCGCCTAGCAATCTATCATCGCTATCAGTGCATGATCCCAAAGCAGAGCAAGGTACTGATAAGCGGGATGATACTTCTAGG ATGCAGCATCCCGAAGAACAACCCTGACGTTGAGGTCCGCGGTTCGACGCGTGGAATGTCAATACTGATCTGTGCAGAATTACCGAAGTGCACGCGAGGATTCTTGGCCCGTATTGCGTGTTAACAGATGGTAATAAATTACCTTCGGAGTTGGCATACACATAACCCATCACCAATCCTTCTCCGTTGAGGCTCCGAAGCCTAACCGACCTGCTCACAGCGAACATGCTGCGTGAGTTTCCAACGATAATCAGATGAACAGGAGAAAGTTGGGTAACGATATGATCTTAAAGAATGTCAGTATATTCTTATGCAT GTGCCCGTATAGCTTAACACGGGAAACGTACTTCCGACACTTAGATTTGTCGATATTGCCCCCTTTAGTTGGCTTTCGCCTAGTTAGCTTCCATGAATGAACTCCAACCACTTGATGATCCTGCGAAGCTAACGTAGGGACGACATCAGCTAATCGGATGTTCTATCTGTCACCATATAGCACGTCGCTTGCACGCAAAATGAGTCCAATATGCGGAGGCAACTTCTAGGAGCGGAGTAACACGGGTTGTATCTGCCCTTAACTTACATACGCACACTCCTTTCGGTATTTAAAGCCTAACAGCGAGGCCCTACCT GGTGGGTAGGCTGTATCTAAGCGTGTCGTAGGTCGCAAAGCGGACAAGCTTAAGGTCGAGCTTCTAGTTAGATGTCTAAGATCATCGTCGGGGCTGCGGAGTTGGTCGCAACGAACTCGAGCGGGAATCTTCAGGTGACTTGATGTTACGGCGGGGAGAGCGGCCTCGCGGTTAATTTTCAGCTTACCCTCAAGAGGTTCGCCCCCCACATACAGTCTTCAGACTTTGCTAGTAGATAGATGCGTTGACTGTGAAAAGTTGTCAGTGGTTTAGTTGAGGTTTCACAGCATTCATAACTGAAGCAACGAGGAGGTCG CGCCCGGGTGGGATCCACCTGAGGCGTGCCGATACTGAACTACAGTGGTCCTTGCCTAATACCTAGTACGAAACTACTGGAGGGCCAGGCATAAGAGTGTCACGTCAAACATCTATGTGTAATTGGCGGCTGGCGTGTATGCCGATACAGGATCTTGTAGCAAAACTCCGCATCTTCGCCAGAATACAATAATTTACTTGCTTTGCACGATAGCTACACGTCTTCCCCCTTTAGTTGACACTGGGCCCAAGAGACCATTCGAGGAGATAGATAGAACTAAAACCTACTGGGACGAATAGTTGTCCACAGGGATACC CTTATCAGGCCAGTATGAGCCTAGATCTTGCACCGGTAACGCCTTGCCCCCCTACAATGGATAAATCCAACATCACCCTTTAGTTCCTGTAGTTCACAGGTCTAATTTGACGTTCGCCTCAGGTTACTGCGCATCACACACGATCGATCGACAAGCTTAACACCTGGCCCGGAAGGAGTTTTGAGCCAGTTAGACCGGATGGCCATAATTGAGGGTCCTATTCAAATGATCATGAGAACGTTCCACACTTGAAGCCGTATTCCCAGTAACAGTGTTTAGCCCTGGGCGTGTGAAAGCCTCGCGGGAACGTTACCTG"
dna = split_dna(dna_string)
k = 15
t = 20
n = 2000

print(" ".join(gibbs_sampler(dna, k, t, n)))